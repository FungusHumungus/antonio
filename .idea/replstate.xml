<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1432625937707">{:repl-history {:ide [], :local [&quot;(flip 3\n      )&quot; &quot;1&quot; &quot;flip&quot; &quot;(defn weather\n  []\n  (let [sunnyToday (flip 0.2)\n        greetingToday (iff sunnyToday\n                           (select [[0.6 \&quot;Hello\&quot;]\n                                    [0.4 \&quot;Howdy\&quot;]])\n                           (select [[0.2 \&quot;Hello\&quot;]\n                                    [0.8 \&quot;Oh no\&quot;]]))\n        sunnyTomorrow (iff sunnyToday\n                           (flip 0.8)\n                           (flip 0.05))\n        greetingTomorrow (iff sunnyTomorrow\n                              (select [[0.5 \&quot;Hello\&quot;]\n                                       [0.5 \&quot;Howdy\&quot;]])\n                              (select [[0.1 \&quot;Hello\&quot;]\n                                       [0.9 \&quot;Oh no\&quot;]]))]\n    (variable-elimination greetingToday \&quot;Hello\&quot;)))&quot; &quot;(defn select\n  [probabilities-&gt;outcomes]\n  (let [probabilities (map (fn [[p _]] (if (number? p) (double p) p)) probabilities-&gt;outcomes)\n        outcomes (map (fn [[_ o]] o) probabilities-&gt;outcomes)]\n    (.apply Select$/MODULE$\n            (apply scala/immutable-list probabilities)\n            (apply scala/immutable-list outcomes)\n            *name* *universe*)))&quot; &quot;(type 3.3)&quot; &quot;(r/reflect Select$/MODULE$)&quot; &quot;(pp/pprint (r/reflect Select$/MODULE$))&quot; &quot;(defn select\n  [probabilities-&gt;outcomes]\n  (let [probabilities (map (fn [[p _]] (if (number? p) (constant p) p)) probabilities-&gt;outcomes)\n        outcomes (map (fn [[_ o]] o) probabilities-&gt;outcomes)]\n    (.apply Select$/MODULE$\n            (apply scala/immutable-list probabilities)\n            (apply scala/immutable-list outcomes)\n            *name* *universe*)))&quot; &quot;(select [[0.2 \&quot;eck\&quot;] [3.9 \&quot;art\&quot;]])&quot; &quot;(def sunny (flip 0.2))&quot; &quot;sunny&quot; &quot;(def ifsunny (select [[0.6 \&quot;Hello\&quot;] \n                      [0.4 \&quot;Howdy\&quot;]]))&quot; &quot;ifsunny&quot; &quot;(def greeting (iif sunny ifsunny \n                   (select [[0.2 \&quot;Hello\&quot;] [0.8 \&quot;Oh no\&quot;]])))&quot; &quot;(def greeting (iff sunny ifsunny \n                   \n                   (select [[0.2 \&quot;Hello\&quot;] [0.8 \&quot;Oh no\&quot;]])))&quot; &quot;(pp/pprint (r/reflect If$/MODULE$))&quot; &quot;(def greeting (iff sunny #(ifsunny)\n                   #(select [[0.2 \&quot;Hello\&quot;] [0.8 \&quot;Oh no\&quot;]])))&quot; &quot;($ )&quot; &quot;(def greeting (iff sunny (scala/wrap-fn #(ifsunny))\n                   (scala/wrap-fn #(select [[0.2 \&quot;Hello\&quot;] [0.8 \&quot;Oh no\&quot;]]))))&quot; &quot;(def greeting (iff sunny ($/fn #(ifsunny))\n                   (scala/wrap-fn #(select [[0.2 \&quot;Hello\&quot;] [0.8 \&quot;Oh no\&quot;]]))))&quot; &quot;(defn iff\n  [test then else]\n  (.apply If$/MODULE$ test ($/fn [] then) ($/fn [] else) *name* *universe*))&quot; &quot;(def greeting (iff sunny ifsunny\n                   (select [[0.2 \&quot;Hello\&quot;] [0.8 \&quot;Oh no\&quot;]])))&quot; &quot;greeting&quot; &quot;(println (variable-elimination greetingTomorrow \&quot;Hello\&quot;))&quot; &quot;(defmacro iff\n  [test then else]\n  `(.apply If$/MODULE$ ~test ($/fn [] ~then) ($/fn [] ~else) *name* *universe*))&quot; &quot;(defn weather\n  []\n  (let [sunnyToday (flip 0.2)\n        greetingToday (iff sunnyToday\n                           (select [[0.6 \&quot;Hello\&quot;]\n                                    [0.4 \&quot;Howdy\&quot;]])\n                           (select [[0.2 \&quot;Hello\&quot;]\n                                    [0.8 \&quot;Oh no\&quot;]]))\n        sunnyTomorrow (iff sunnyToday\n                           (flip 0.8)\n                           (flip 0.05))\n        greetingTomorrow (iff sunnyTomorrow\n                              (select [[0.5 \&quot;Hello\&quot;]\n                                       [0.5 \&quot;Howdy\&quot;]])\n                              (select [[0.1 \&quot;Hello\&quot;]\n                                       [0.9 \&quot;Oh no\&quot;]]))]\n    (println (variable-elimination greetingToday \&quot;Hello\&quot;))\n    (.observe greetingToday \&quot;Hello\&quot;)\n    (println (variable-elimination sunnyToday true))\n    (println (variable-elimination greetingTomorrow \&quot;Hello\&quot;))))&quot; &quot;weather&quot; &quot;(weather)&quot; &quot;(defn observe \n  [element value]\n  (.observe element value))&quot; &quot;(defn weather\n  []\n  (let [sunnyToday (flip 0.2)\n        greetingToday (iff sunnyToday\n                           (select [[0.6 \&quot;Hello\&quot;]\n                                    [0.4 \&quot;Howdy\&quot;]])\n                           (select [[0.2 \&quot;Hello\&quot;]\n                                    [0.8 \&quot;Oh no\&quot;]]))\n        sunnyTomorrow (iff sunnyToday\n                           (flip 0.8)\n                           (flip 0.05))\n        greetingTomorrow (iff sunnyTomorrow\n                              (select [[0.5 \&quot;Hello\&quot;]\n                                       [0.5 \&quot;Howdy\&quot;]])\n                              (select [[0.1 \&quot;Hello\&quot;]\n                                       [0.9 \&quot;Oh no\&quot;]]))]\n    (println (variable-elimination greetingToday \&quot;Hello\&quot;))\n    (observe greetingToday \&quot;Hello\&quot;)\n    (println (variable-elimination sunnyToday true))\n    (println (variable-elimination greetingTomorrow \&quot;Hello\&quot;))))&quot; &quot;(weather\n  )&quot;], :remote []}}</component>
</project>